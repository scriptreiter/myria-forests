static_depth = [2];
trees = empty(tree_id:int,node_id:int,left_node:int,right_node:int,majority:int);

def get_random_col(num_cols): [int(random() * *num_cols)];

-- cur: current node
-- independent: id of independent variable in denormalized table
-- splits: the table (split_id, wine_id)
-- info: the denormalized table of wine info (wine_id, feature_id, feature_val)
def calculate_majority(cur, independent, splits, info):
  aggregates = [from info, splits where splits.$0 = *cur and and info.$0 = splits.$1 and info.$1 = *independent emit info.$2, count(info.$2) as feature_count];
  max_count = [from aggregates emit max(info.$1)];
  limit([from aggregates where $1 = max_count emit $0], 1);
  
-- left: the left node id
-- right: the right node id
-- thresh: the threshold to split on
-- value: the value in question
define choose_split(left, right, thresh, value) {
  case when value < thresh then left
    else right end;

-- all_wine_info: denormalized table of features
-- tree_id: the id of this tree
def split_table(all_wine_info, tree_id):
  cur_node = [0];
  -- id of independent variable
  indep = [0];
  -- build table of (node, wine_id)
  unique_ids = distinct([from all_wine_info emit $0]);
  splits = [from unique_ids emit 0, $0];

  do
    -- add this table to the tree
    trees = trees + [*tree_id,*cur_node,2 * *cur_node, 2 * *cur_node + 1, *calculate_majority(cur, splits, all_wine_info)];
    -- choose a random column
    rand_col = get_random_col(num_cols);
    curr_features = [from current_table where feature_id == rand_col emit *];
    -- Calculate the threshold
    threshold = [from curr_features, splits where splits.$0 = *cur emit avg(curr_features.$2)];
    -- split accordingly
    splits = [from splits emit choose_split(2 * *cur, 2 * *cur + 1, *threshold, $0), $1];
    cur = [*cur + 1];
  -- TODO: determine condition
  while [*cur_node < pow(*static_depth, 2)];
